(()=>{"use strict";class t{constructor(){if(t.instance)return t.instance;t.instance=this,this.init()}init(){this.setupInstallListener(),this.setupActionListener(),this.setupContextMenus(),this.setupMessageListener(),this.log("Background service initialized")}setupInstallListener(){chrome.runtime.onInstalled.addListener(t=>{this.log("Extension installed/updated:",t.reason),"install"===t.reason?this.handleFirstInstall():"update"===t.reason&&this.handleUpdate(t.previousVersion)})}setupActionListener(){chrome.action.onClicked.addListener(async t=>{this.log("Extension icon clicked for tab:",t.id);try{if(!t.id)throw new Error("No tab ID available");await this.handleIconClick(t)}catch(t){console.error("Error handling icon click:",t)}})}setupContextMenus(){chrome.runtime.onInstalled.addListener(()=>{chrome.contextMenus.create({id:"unmute-action",title:"Unmute Action",contexts:["page","selection"]})}),chrome.contextMenus.onClicked.addListener((t,e)=>{this.log("Context menu clicked:",t.menuItemId),"unmute-action"===t.menuItemId&&e?.id&&this.handleContextMenuClick(t,e)})}async handleFirstInstall(){this.log("First time installation"),await chrome.storage.sync.set({isEnabled:!0,settings:{autoActivate:!1,showNotifications:!0}})}async handleUpdate(t){this.log("Extension updated from version:",t);try{(await chrome.storage.sync.get(["settings"])).settings||await chrome.storage.sync.set({settings:{autoActivate:!1,showNotifications:!0}})}catch(t){console.error("Error during update migration:",t)}}async handleIconClick(t){if(t.id)try{await chrome.tabs.sendMessage(t.id,{action:"iconClicked",tabInfo:{id:t.id,url:t.url,title:t.title}})}catch(e){await this.injectContentScript(t.id)}}async handleContextMenuClick(t,e){if(e.id)try{await chrome.tabs.sendMessage(e.id,{action:"contextMenuClicked",menuInfo:t})}catch(t){console.error("Error sending context menu message:",t)}}async injectContentScript(t){try{await chrome.scripting.executeScript({target:{tabId:t},files:["content.js"]}),this.log("Content script injected into tab:",t)}catch(t){console.error("Failed to inject content script:",t)}}setupMessageListener(){chrome.runtime.onMessage.addListener(async(t,e,n)=>("sendSlackMessage"===t.action&&(await this.sendSlackNotification(),n({status:"success"})),!0))}async sendSlackNotification(){try{const t=(await chrome.storage.local.get(["slackConfig"])).slackConfig;if(!t||!t.channelId||!t.userToken)return void this.log("Slack not configured, skipping notification");this.log("Sending Slack notification to channel:",t.channelId);const e=await fetch("https://slack.com/api/chat.postMessage",{method:"POST",headers:{Authorization:`Bearer ${t.userToken}`,"Content-Type":"application/json"},body:JSON.stringify({channel:t.channelId,text:"ðŸŽ¤ microphone triggered"})}),n=await e.json();this.log("Slack API response:",n),n.ok?this.log("Slack message sent successfully"):console.error("Slack API error:",n.error)}catch(t){console.error("Error sending Slack notification:",t)}}log(t,...e){console.log(`[Unmute Background] ${t}`,...e)}}new t})();