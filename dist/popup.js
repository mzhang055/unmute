(()=>{"use strict";class t{constructor(){if(this.totalCountEl=document.getElementById("totalCount"),this.lastPressEl=document.getElementById("lastPress"),this.currentStatusEl=document.getElementById("currentStatus"),this.clearBtn=document.getElementById("clearBtn"),this.statusDiv=document.getElementById("status"),this.channelIdInput=document.getElementById("channelId"),this.userTokenInput=document.getElementById("userToken"),this.saveSlackBtn=document.getElementById("saveSlackBtn"),this.testSlackBtn=document.getElementById("testSlackBtn"),this.slackStatusEl=document.getElementById("slackStatus"),!(this.totalCountEl&&this.lastPressEl&&this.currentStatusEl&&this.clearBtn&&this.statusDiv&&this.channelIdInput&&this.userTokenInput&&this.saveSlackBtn&&this.testSlackBtn&&this.slackStatusEl))throw new Error("Required DOM elements not found");this.init()}init(){this.clearBtn.addEventListener("click",this.handleClearStats.bind(this)),this.saveSlackBtn.addEventListener("click",this.handleSaveSlackConfig.bind(this)),this.testSlackBtn.addEventListener("click",this.handleTestSlack.bind(this)),this.loadAndDisplayStats(),this.loadSlackConfig(),chrome.runtime.onMessage.addListener(t=>{"trackingUpdate"===t.action&&(this.updateStats(),this.showActiveStatus())}),setInterval(()=>this.loadAndDisplayStats(),1e3)}async loadAndDisplayStats(){try{const t=(await chrome.storage.local.get(["trackingStats"])).trackingStats||{totalCount:0,lastPress:"Never"};this.totalCountEl.textContent=t.totalCount.toString(),this.lastPressEl.textContent=t.lastPress}catch(t){console.error("Error loading stats:",t)}}async updateStats(){try{const t=(new Date).toLocaleTimeString(),s={totalCount:((await chrome.storage.local.get(["trackingStats"])).trackingStats||{totalCount:0,lastPress:"Never"}).totalCount+1,lastPress:t};await chrome.storage.local.set({trackingStats:s}),this.loadAndDisplayStats()}catch(t){console.error("Error updating stats:",t)}}showActiveStatus(){this.currentStatusEl.textContent="Active",this.currentStatusEl.className="stat-value status-active",setTimeout(()=>{this.currentStatusEl.textContent="Ready",this.currentStatusEl.className="stat-value status-ready"},2e3)}async handleClearStats(){try{const t={totalCount:0,lastPress:"Never"};await chrome.storage.local.set({trackingStats:t}),this.loadAndDisplayStats(),this.showStatus("Stats cleared successfully!","success")}catch(t){console.error("Error clearing stats:",t),this.showStatus("Failed to clear stats","error")}}showStatus(t,s){this.statusDiv.textContent=t,this.statusDiv.className=`status ${s}`,this.statusDiv.style.display="block",setTimeout(()=>this.hideStatus(),3e3)}hideStatus(){this.statusDiv.style.display="none"}async loadSlackConfig(){try{const t=(await chrome.storage.local.get(["slackConfig"])).slackConfig;t?(this.channelIdInput.value=t.channelId||"",this.userTokenInput.value=t.userToken||"",this.updateSlackStatus(!0)):this.updateSlackStatus(!1)}catch(t){console.error("Error loading Slack config:",t),this.updateSlackStatus(!1)}}async handleSaveSlackConfig(){try{const t=this.channelIdInput.value.trim(),s=this.userTokenInput.value.trim();if(!t||!s)return void this.showStatus("Please fill in both Channel ID and User Token","error");const e={channelId:t,userToken:s};await chrome.storage.local.set({slackConfig:e}),this.updateSlackStatus(!0),this.showStatus("Slack configuration saved!","success")}catch(t){console.error("Error saving Slack config:",t),this.showStatus("Failed to save configuration","error")}}async handleTestSlack(){try{const t=(await chrome.storage.local.get(["slackConfig"])).slackConfig;if(!t||!t.channelId||!t.userToken)return void this.showStatus("Please save configuration first","error");this.testSlackBtn.disabled=!0,this.testSlackBtn.textContent="Testing...",await this.sendSlackMessage("ðŸ”§ Test message from Unmute Tracker extension",t)?this.showStatus("Test message sent successfully!","success"):this.showStatus("Failed to send test message","error")}catch(t){console.error("Error testing Slack:",t),this.showStatus("Error testing Slack integration","error")}finally{this.testSlackBtn.disabled=!1,this.testSlackBtn.textContent="Test Message"}}async sendSlackMessage(t,s){try{console.log("Sending Slack message to channel:",s.channelId);const e=await fetch("https://slack.com/api/chat.postMessage",{method:"POST",headers:{Authorization:`Bearer ${s.userToken}`,"Content-Type":"application/json"},body:JSON.stringify({channel:s.channelId,text:t})}),a=await e.json();if(console.log("Slack API response:",a),!0===a.ok)return!0;{console.error("Slack API error:",a.error);let t="Failed to send message";return"channel_not_found"===a.error?t="Channel not found. Check the Channel ID.":"invalid_auth"===a.error?t="Invalid user token. Check your token.":"not_in_channel"===a.error?t="User not in channel. Join the channel first.":"missing_scope"===a.error?t="User token missing permissions. Add chat:write scope.":a.error&&(t=`Slack error: ${a.error}`),this.showStatus(t,"error"),!1}}catch(t){return console.error("Network error sending Slack message:",t),this.showStatus("Network error. Check your connection.","error"),!1}}updateSlackStatus(t){t?(this.slackStatusEl.textContent="Configured",this.slackStatusEl.className="slack-indicator configured"):(this.slackStatusEl.textContent="Not configured",this.slackStatusEl.className="slack-indicator")}}document.addEventListener("DOMContentLoaded",()=>{try{new t}catch(t){console.error("Failed to initialize popup:",t)}})})();