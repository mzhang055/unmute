(()=>{"use strict";class e{constructor(){if(e.instance)return e.instance;e.instance=this,this.init()}init(){this.setupInstallListener(),this.setupActionListener(),this.setupContextMenus(),this.setupMessageListener(),this.log("Background service initialized"),this.log("Message listener setup completed")}setupInstallListener(){chrome.runtime.onInstalled.addListener(e=>{this.log("Extension installed/updated:",e.reason),"install"===e.reason?this.handleFirstInstall():"update"===e.reason&&this.handleUpdate(e.previousVersion)})}setupActionListener(){chrome.action.onClicked.addListener(async e=>{this.log("Extension icon clicked for tab:",e.id);try{if(!e.id)throw new Error("No tab ID available");await this.handleIconClick(e)}catch(e){console.error("Error handling icon click:",e)}})}setupContextMenus(){chrome.runtime.onInstalled.addListener(()=>{chrome.contextMenus.create({id:"unmute-action",title:"Unmute Action",contexts:["page","selection"]})}),chrome.contextMenus.onClicked.addListener((e,o)=>{this.log("Context menu clicked:",e.menuItemId),"unmute-action"===e.menuItemId&&o?.id&&this.handleContextMenuClick(e,o)})}async handleFirstInstall(){this.log("First time installation"),await chrome.storage.sync.set({isEnabled:!0,settings:{autoActivate:!1,showNotifications:!0}})}async handleUpdate(e){this.log("Extension updated from version:",e);try{(await chrome.storage.sync.get(["settings"])).settings||await chrome.storage.sync.set({settings:{autoActivate:!1,showNotifications:!0}})}catch(e){console.error("Error during update migration:",e)}}async handleIconClick(e){if(e.id)try{await chrome.tabs.sendMessage(e.id,{action:"iconClicked",tabInfo:{id:e.id,url:e.url,title:e.title}})}catch(o){await this.injectContentScript(e.id)}}async handleContextMenuClick(e,o){if(o.id)try{await chrome.tabs.sendMessage(o.id,{action:"contextMenuClicked",menuInfo:e})}catch(e){console.error("Error sending context menu message:",e)}}async injectContentScript(e){try{await chrome.scripting.executeScript({target:{tabId:e},files:["content.js"]}),this.log("Content script injected into tab:",e)}catch(e){console.error("Failed to inject content script:",e)}}setupMessageListener(){this.log("Setting up message listener..."),chrome.runtime.onMessage.addListener((e,o,t)=>(this.log("=== MESSAGE RECEIVED ==="),this.log("Action:",e?.action||"NO ACTION"),this.log("Message details:",e),(async()=>{try{if("sendSlackMessage"===e.action){const o=e.message||"ðŸŽ¤ microphone triggered";await this.sendSlackNotification(o),t({status:"success"})}else if("generateTTSAndSaveLocally"===e.action){this.log("Processing generateTTSAndSaveLocally request..."),this.log("Text to convert:",e.text);const o=await this.generateTTSAndSaveLocally(e.text);this.log("TTS generation and save result:",o),t({status:"success",audioSaved:o})}else"sendSlackAudio"===e.action?(await this.sendSlackAudio(e.audioData,e.filename,e.message),t({status:"success"})):(this.log("Unknown action received:",e.action),t({status:"error",message:"Unknown action"}))}catch(e){this.log("Error in message handler:",e),t({status:"error",message:"Handler error"})}this.log("=== MESSAGE PROCESSING COMPLETED ===")})(),!0))}async sendSlackNotification(e){try{const o=(await chrome.storage.local.get(["slackConfig"])).slackConfig;if(!o||!o.channelId||!o.userToken)return void this.log("Slack not configured, skipping notification");this.log("Sending Slack notification to channel:",o.channelId),this.log("Message content:",e);const t=await fetch("https://slack.com/api/chat.postMessage",{method:"POST",headers:{Authorization:`Bearer ${o.userToken}`,"Content-Type":"application/json"},body:JSON.stringify({channel:o.channelId,text:e})}),a=await t.json();this.log("Slack API response:",a),a.ok?this.log("Slack message sent successfully"):console.error("Slack API error:",a.error)}catch(e){console.error("Error sending Slack notification:",e)}}async generateTTSAndSaveLocally(e){try{this.log("=== STARTING TTS GENERATION PROCESS ==="),this.log("Input text:",e),this.log("Text length:",e.length);const o=await chrome.storage.local.get(["fishConfig"]);this.log("Storage result:",o);const t=o.fishConfig;if(this.log("Fish config loaded:",t?"Yes":"No"),!t||!t.apiKey||!t.voiceId)return this.log("ERROR: Fish TTS not configured, skipping TTS generation"),this.log("Config details - apiKey present:",!!t?.apiKey),this.log("Config details - voiceId present:",!!t?.voiceId),!1;this.log("Fish API Key (first 10 chars):",t.apiKey.substring(0,10)+"..."),this.log("Voice ID:",t.voiceId),this.log("Making API request to Fish TTS...");const a={text:e,reference_id:t.voiceId,format:"mp3"};this.log("Request body:",a);const i=await fetch("https://api.fish.audio/v1/tts",{method:"POST",headers:{Authorization:`Bearer ${t.apiKey}`,"Content-Type":"application/json",model:"speech-1.5"},body:JSON.stringify(a)});if(this.log("Fish API response status:",i.status),this.log("Fish API response headers:",i.headers.get("content-type")),i.ok){this.log("Fish API response successful, getting blob...");const o=await i.blob();this.log("Audio blob size:",o.size,"bytes"),this.log("Audio blob type:",o.type);const t=`voice_note_${Date.now()}.mp3`,a=`unmute/audio/${t}`;this.log("Generated filename:",t),this.log("Full path:",a),await this.saveAudioToDownloads(o,a),this.log("Sending audio and SpongeBob image to Slack...");const s=`ðŸŽ¤ Voice note: "${e}"`;return await this.sendSlackAudioAndImage(o,t,s),this.log("=== TTS GENERATION PROCESS COMPLETED SUCCESSFULLY ==="),!0}this.log("ERROR: Fish TTS API error"),this.log("Status:",i.status),this.log("Status text:",i.statusText);try{const e=await i.text();this.log("Error response body:",e)}catch(e){this.log("Could not read error response body")}return!1}catch(e){return this.log("ERROR: Exception in generateTTSAndSaveLocally"),console.error("Error generating TTS:",e),this.log("Error name:",e.name),this.log("Error message:",e.message),this.log("Error stack:",e.stack),!1}}async saveAudioToDownloads(e,o){try{this.log("=== STARTING FILE SAVE PROCESS ==="),this.log("Blob size:",e.size),this.log("Full path:",o),this.log("Converting blob to data URL...");const t=await this.blobToDataUrl(e);this.log("Data URL created, length:",t.length),this.log("Initiating download..."),chrome.downloads.download({url:t,filename:o,saveAs:!1},e=>{this.log("Download initiated with ID:",e),chrome.runtime.lastError?this.log("Download error:",chrome.runtime.lastError.message):(this.log("Download started successfully"),this.log("File should be saved to Downloads/"+o))}),this.log("=== FILE SAVE PROCESS COMPLETED ===")}catch(e){this.log("ERROR: Exception in saveAudioToDownloads"),console.error("Error saving audio file:",e),this.log("Error name:",e.name),this.log("Error message:",e.message),this.log("Error stack:",e.stack)}}async blobToDataUrl(e){return new Promise((o,t)=>{const a=new FileReader;a.onload=()=>{o(a.result)},a.onerror=t,a.readAsDataURL(e)})}async blobToBase64(e){return new Promise((o,t)=>{const a=new FileReader;a.onload=()=>{const e=a.result.split(",")[1];o(e)},a.onerror=t,a.readAsDataURL(e)})}async sendSlackAudioAndImage(e,o,t){try{const t=(await chrome.storage.local.get(["slackConfig"])).slackConfig;if(!t||!t.channelId||!t.userToken)return void this.log("Slack not configured, skipping uploads");this.log("Uploading audio and SpongeBob image to Slack...");const a=chrome.runtime.getURL("images/spongebob.png");this.log("SpongeBob image URL:",a);let i=null;try{const e=await fetch(a);if(!e.ok)throw new Error(`Image fetch failed: ${e.status}`);i=await e.blob(),this.log("SpongeBob image loaded, size:",i.size)}catch(e){this.log("Failed to load SpongeBob image:",e),this.log("Proceeding with audio upload only")}i?(await this.uploadFileToSlack(e,o,"",t),await this.uploadImageToSlack(i,"spongebob.png",t),this.log("Audio and image uploaded to Slack")):(await this.uploadFileToSlack(e,o,"",t),this.log("Audio uploaded to Slack successfully (image failed)"))}catch(e){console.error("Error uploading files to Slack:",e)}}async uploadMultipleFilesToSlack(e,o){try{this.log("Uploading multiple files to Slack together...");const t=e.map(async e=>{this.log("Getting upload URL for:",e.filename);const t=await fetch("https://slack.com/api/files.getUploadURLExternal",{method:"POST",headers:{Authorization:`Bearer ${o.userToken}`,"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({filename:e.filename,length:e.blob.size.toString()})}),a=await t.json();if(!a.ok)throw new Error(`Failed to get upload URL for ${e.filename}: ${a.error}`);return{...e,uploadData:a}}),a=await Promise.all(t);this.log("Got upload URLs for all files");const i=a.map(async e=>{this.log("Uploading file:",e.filename);const o=await fetch(e.uploadData.upload_url,{method:"POST",body:e.blob});if(!o.ok)throw new Error(`File upload failed for ${e.filename}: ${o.status}`);return e});await Promise.all(i),this.log("All files uploaded successfully");const s=await fetch("https://slack.com/api/files.completeUploadExternal",{method:"POST",headers:{Authorization:`Bearer ${o.userToken}`,"Content-Type":"application/json"},body:JSON.stringify({files:a.map(e=>({id:e.uploadData.file_id,title:e.filename})),channel_id:o.channelId})}),n=await s.json();this.log("Complete upload response:",n),n.ok?this.log("All files shared to Slack successfully in one message"):console.error("Failed to complete multi-file upload:",n.error)}catch(e){console.error("Error uploading multiple files to Slack:",e)}}async uploadImageToSlack(e,o,t){try{this.log("Uploading image for inline display to Slack:",o);const a=await fetch("https://slack.com/api/files.getUploadURLExternal",{method:"POST",headers:{Authorization:`Bearer ${t.userToken}`,"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({filename:o,length:e.size.toString()})}),i=await a.json();if(!i.ok)return void console.error("Failed to get upload URL for image:",i.error);const s=await fetch(i.upload_url,{method:"POST",body:e});if(!s.ok)return void console.error("Image upload failed:",s.status,s.statusText);const n=await fetch("https://slack.com/api/files.completeUploadExternal",{method:"POST",headers:{Authorization:`Bearer ${t.userToken}`,"Content-Type":"application/json"},body:JSON.stringify({files:[{id:i.file_id,title:o}],channel_id:t.channelId})}),l=await n.json();l.ok?this.log("Image uploaded successfully for display"):console.error("Failed to complete image upload:",l.error)}catch(e){console.error("Error uploading image to Slack:",e)}}async uploadFileToSlack(e,o,t,a){try{this.log("Uploading file to Slack:",o),this.log("Step 1: Getting upload URL for",o);const i=await fetch("https://slack.com/api/files.getUploadURLExternal",{method:"POST",headers:{Authorization:`Bearer ${a.userToken}`,"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({filename:o,length:e.size.toString()})}),s=await i.json();if(this.log("Upload URL response for",o,":",s),!s.ok)return void console.error("Failed to get upload URL for",o,":",s.error);this.log("Step 2: Uploading",o,"to:",s.upload_url);const n=await fetch(s.upload_url,{method:"POST",body:e});if(!n.ok)return void console.error("File upload failed for",o,":",n.status,n.statusText);this.log("Step 3: Completing upload for",o);const l={files:[{id:s.file_id,title:o}],channel_id:a.channelId};t&&t.trim()&&(l.initial_comment=t);const r=await fetch("https://slack.com/api/files.completeUploadExternal",{method:"POST",headers:{Authorization:`Bearer ${a.userToken}`,"Content-Type":"application/json"},body:JSON.stringify(l)}),c=await r.json();this.log("Complete upload response for",o,":",c),c.ok?this.log("File uploaded successfully:",o):console.error("Failed to complete upload for",o,":",c.error)}catch(e){console.error("Error uploading",o,"to Slack:",e)}}async sendSlackAudioBlob(e,o,t){try{const a=(await chrome.storage.local.get(["slackConfig"])).slackConfig;if(!a||!a.channelId||!a.userToken)return void this.log("Slack not configured, skipping audio upload");this.log("Uploading audio file to Slack using new API:",o),this.log("Step 1: Getting upload URL...");const i=await fetch("https://slack.com/api/files.getUploadURLExternal",{method:"POST",headers:{Authorization:`Bearer ${a.userToken}`,"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({filename:o,length:e.size.toString()})}),s=await i.json();if(this.log("Upload URL response:",s),!s.ok)return void console.error("Failed to get upload URL:",s.error);this.log("Step 2: Uploading file to:",s.upload_url);const n=await fetch(s.upload_url,{method:"POST",body:e});if(!n.ok)return void console.error("File upload failed:",n.status,n.statusText);this.log("Step 3: Completing upload...");const l=await fetch("https://slack.com/api/files.completeUploadExternal",{method:"POST",headers:{Authorization:`Bearer ${a.userToken}`,"Content-Type":"application/json"},body:JSON.stringify({files:[{id:s.file_id,title:o}],channel_id:a.channelId,initial_comment:t})}),r=await l.json();this.log("Complete upload response:",r),r.ok?this.log("Audio file uploaded to Slack successfully"):console.error("Failed to complete upload:",r.error)}catch(e){console.error("Error uploading audio to Slack:",e)}}async sendSlackAudio(e,o,t){try{const a=(await chrome.storage.local.get(["slackConfig"])).slackConfig;if(!a||!a.channelId||!a.userToken)return void this.log("Slack not configured, skipping audio upload");this.log("Uploading audio file to Slack:",o);const i=this.base64ToBlob(e,"audio/mpeg"),s=new FormData;s.append("file",i,o),s.append("channels",a.channelId),s.append("initial_comment",t),s.append("filetype","mp3");const n=await fetch("https://slack.com/api/files.upload",{method:"POST",headers:{Authorization:`Bearer ${a.userToken}`},body:s}),l=await n.json();this.log("Slack file upload response:",l),l.ok?this.log("Audio file uploaded to Slack successfully"):console.error("Slack file upload error:",l.error)}catch(e){console.error("Error uploading audio to Slack:",e)}}base64ToBlob(e,o){const t=atob(e),a=new Array(t.length);for(let e=0;e<t.length;e++)a[e]=t.charCodeAt(e);const i=new Uint8Array(a);return new Blob([i],{type:o})}log(e,...o){console.log(`[Unmute Background] ${e}`,...o)}}new e})();