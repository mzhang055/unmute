(()=>{"use strict";class e{constructor(){if(e.instance)return e.instance;e.instance=this,this.init()}init(){this.setupInstallListener(),this.setupActionListener(),this.setupContextMenus(),this.setupMessageListener(),this.log("Background service initialized"),this.log("Message listener setup completed")}setupInstallListener(){chrome.runtime.onInstalled.addListener(e=>{this.log("Extension installed/updated:",e.reason),"install"===e.reason?this.handleFirstInstall():"update"===e.reason&&this.handleUpdate(e.previousVersion)})}setupActionListener(){chrome.action.onClicked.addListener(async e=>{this.log("Extension icon clicked for tab:",e.id);try{if(!e.id)throw new Error("No tab ID available");await this.handleIconClick(e)}catch(e){console.error("Error handling icon click:",e)}})}setupContextMenus(){chrome.runtime.onInstalled.addListener(()=>{chrome.contextMenus.create({id:"unmute-action",title:"Unmute Action",contexts:["page","selection"]})}),chrome.contextMenus.onClicked.addListener((e,t)=>{this.log("Context menu clicked:",e.menuItemId),"unmute-action"===e.menuItemId&&t?.id&&this.handleContextMenuClick(e,t)})}async handleFirstInstall(){this.log("First time installation"),await chrome.storage.sync.set({isEnabled:!0,settings:{autoActivate:!1,showNotifications:!0}})}async handleUpdate(e){this.log("Extension updated from version:",e);try{(await chrome.storage.sync.get(["settings"])).settings||await chrome.storage.sync.set({settings:{autoActivate:!1,showNotifications:!0}})}catch(e){console.error("Error during update migration:",e)}}async handleIconClick(e){if(e.id)try{await chrome.tabs.sendMessage(e.id,{action:"iconClicked",tabInfo:{id:e.id,url:e.url,title:e.title}})}catch(t){await this.injectContentScript(e.id)}}async handleContextMenuClick(e,t){if(t.id)try{await chrome.tabs.sendMessage(t.id,{action:"contextMenuClicked",menuInfo:e})}catch(e){console.error("Error sending context menu message:",e)}}async injectContentScript(e){try{await chrome.scripting.executeScript({target:{tabId:e},files:["content.js"]}),this.log("Content script injected into tab:",e)}catch(e){console.error("Failed to inject content script:",e)}}setupMessageListener(){this.log("Setting up message listener..."),chrome.runtime.onMessage.addListener((e,t,o)=>(this.log("=== MESSAGE RECEIVED ==="),this.log("Action:",e?.action||"NO ACTION"),this.log("Message details:",e),(async()=>{try{if("sendSlackMessage"===e.action){const t=e.message||"ðŸŽ¤ microphone triggered";await this.sendSlackNotification(t),o({status:"success"})}else if("generateTTSAndSaveLocally"===e.action){this.log("Processing generateTTSAndSaveLocally request..."),this.log("Text to convert:",e.text);const t=await this.generateTTSAndSaveLocally(e.text);this.log("TTS generation and save result:",t),o({status:"success",audioSaved:t})}else"sendSlackAudio"===e.action?(await this.sendSlackAudio(e.audioData,e.filename,e.message),o({status:"success"})):(this.log("Unknown action received:",e.action),o({status:"error",message:"Unknown action"}))}catch(e){this.log("Error in message handler:",e),o({status:"error",message:"Handler error"})}this.log("=== MESSAGE PROCESSING COMPLETED ===")})(),!0))}async sendSlackNotification(e){try{const t=(await chrome.storage.local.get(["slackConfig"])).slackConfig;if(!t||!t.channelId||!t.userToken)return void this.log("Slack not configured, skipping notification");this.log("Sending Slack notification to channel:",t.channelId),this.log("Message content:",e);const o=await fetch("https://slack.com/api/chat.postMessage",{method:"POST",headers:{Authorization:`Bearer ${t.userToken}`,"Content-Type":"application/json"},body:JSON.stringify({channel:t.channelId,text:e})}),s=await o.json();this.log("Slack API response:",s),s.ok?this.log("Slack message sent successfully"):console.error("Slack API error:",s.error)}catch(e){console.error("Error sending Slack notification:",e)}}async generateTTSAndSaveLocally(e){try{this.log("=== STARTING TTS GENERATION PROCESS ==="),this.log("Input text:",e),this.log("Text length:",e.length);const t=await chrome.storage.local.get(["fishConfig"]);this.log("Storage result:",t);const o=t.fishConfig;if(this.log("Fish config loaded:",o?"Yes":"No"),!o||!o.apiKey||!o.voiceId)return this.log("ERROR: Fish TTS not configured, skipping TTS generation"),this.log("Config details - apiKey present:",!!o?.apiKey),this.log("Config details - voiceId present:",!!o?.voiceId),!1;this.log("Fish API Key (first 10 chars):",o.apiKey.substring(0,10)+"..."),this.log("Voice ID:",o.voiceId),this.log("Making API request to Fish TTS...");const s={text:e,reference_id:o.voiceId,format:"mp3"};this.log("Request body:",s);const i=await fetch("https://api.fish.audio/v1/tts",{method:"POST",headers:{Authorization:`Bearer ${o.apiKey}`,"Content-Type":"application/json",model:"speech-1.5"},body:JSON.stringify(s)});if(this.log("Fish API response status:",i.status),this.log("Fish API response headers:",i.headers.get("content-type")),i.ok){this.log("Fish API response successful, getting blob...");const t=await i.blob();this.log("Audio blob size:",t.size,"bytes"),this.log("Audio blob type:",t.type);const o=`voice_note_${Date.now()}.mp3`,s=`unmute/audio/${o}`;this.log("Generated filename:",o),this.log("Full path:",s),await this.saveAudioToDownloads(t,s),this.log("Sending audio to Slack...");const n=`ðŸŽ¤ Voice note: "${e}"`;return await this.sendSlackAudioBlob(t,o,n),this.log("=== TTS GENERATION PROCESS COMPLETED SUCCESSFULLY ==="),!0}this.log("ERROR: Fish TTS API error"),this.log("Status:",i.status),this.log("Status text:",i.statusText);try{const e=await i.text();this.log("Error response body:",e)}catch(e){this.log("Could not read error response body")}return!1}catch(e){return this.log("ERROR: Exception in generateTTSAndSaveLocally"),console.error("Error generating TTS:",e),this.log("Error name:",e.name),this.log("Error message:",e.message),this.log("Error stack:",e.stack),!1}}async saveAudioToDownloads(e,t){try{this.log("=== STARTING FILE SAVE PROCESS ==="),this.log("Blob size:",e.size),this.log("Full path:",t),this.log("Converting blob to data URL...");const o=await this.blobToDataUrl(e);this.log("Data URL created, length:",o.length),this.log("Initiating download..."),chrome.downloads.download({url:o,filename:t,saveAs:!1},e=>{this.log("Download initiated with ID:",e),chrome.runtime.lastError?this.log("Download error:",chrome.runtime.lastError.message):(this.log("Download started successfully"),this.log("File should be saved to Downloads/"+t))}),this.log("=== FILE SAVE PROCESS COMPLETED ===")}catch(e){this.log("ERROR: Exception in saveAudioToDownloads"),console.error("Error saving audio file:",e),this.log("Error name:",e.name),this.log("Error message:",e.message),this.log("Error stack:",e.stack)}}async blobToDataUrl(e){return new Promise((t,o)=>{const s=new FileReader;s.onload=()=>{t(s.result)},s.onerror=o,s.readAsDataURL(e)})}async blobToBase64(e){return new Promise((t,o)=>{const s=new FileReader;s.onload=()=>{const e=s.result.split(",")[1];t(e)},s.onerror=o,s.readAsDataURL(e)})}async sendSlackAudioBlob(e,t,o){try{const s=(await chrome.storage.local.get(["slackConfig"])).slackConfig;if(!s||!s.channelId||!s.userToken)return void this.log("Slack not configured, skipping audio upload");this.log("Uploading audio file to Slack using new API:",t),this.log("Step 1: Getting upload URL...");const i=await fetch("https://slack.com/api/files.getUploadURLExternal",{method:"POST",headers:{Authorization:`Bearer ${s.userToken}`,"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({filename:t,length:e.size.toString()})}),n=await i.json();if(this.log("Upload URL response:",n),!n.ok)return void console.error("Failed to get upload URL:",n.error);this.log("Step 2: Uploading file to:",n.upload_url);const a=await fetch(n.upload_url,{method:"POST",body:e});if(!a.ok)return void console.error("File upload failed:",a.status,a.statusText);this.log("Step 3: Completing upload...");const r=await fetch("https://slack.com/api/files.completeUploadExternal",{method:"POST",headers:{Authorization:`Bearer ${s.userToken}`,"Content-Type":"application/json"},body:JSON.stringify({files:[{id:n.file_id,title:t}],channel_id:s.channelId,initial_comment:o})}),l=await r.json();this.log("Complete upload response:",l),l.ok?this.log("Audio file uploaded to Slack successfully"):console.error("Failed to complete upload:",l.error)}catch(e){console.error("Error uploading audio to Slack:",e)}}async sendSlackAudio(e,t,o){try{const s=(await chrome.storage.local.get(["slackConfig"])).slackConfig;if(!s||!s.channelId||!s.userToken)return void this.log("Slack not configured, skipping audio upload");this.log("Uploading audio file to Slack:",t);const i=this.base64ToBlob(e,"audio/mpeg"),n=new FormData;n.append("file",i,t),n.append("channels",s.channelId),n.append("initial_comment",o),n.append("filetype","mp3");const a=await fetch("https://slack.com/api/files.upload",{method:"POST",headers:{Authorization:`Bearer ${s.userToken}`},body:n}),r=await a.json();this.log("Slack file upload response:",r),r.ok?this.log("Audio file uploaded to Slack successfully"):console.error("Slack file upload error:",r.error)}catch(e){console.error("Error uploading audio to Slack:",e)}}base64ToBlob(e,t){const o=atob(e),s=new Array(o.length);for(let e=0;e<o.length;e++)s[e]=o.charCodeAt(e);const i=new Uint8Array(s);return new Blob([i],{type:t})}log(e,...t){console.log(`[Unmute Background] ${e}`,...t)}}new e})();